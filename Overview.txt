Version 1 Walkthrough Overview:
--------------------------------
At the end of the README, we asked you to think about what
classes you might need.  We are now going to do the same
excercise in a "think aloud" sort of way.  That is, what
is written here is done with my initial idea, followed by
thoughts on it, revisions etc.   Rather than presenting
a polished end product, I want you to see as much of the thought
process as is easy to communicate in text.

I started with some classes that stood out to me from the description:

 - class: Board
    fields: width + height
    fields: ships (list? map from coordinates to ships? set?)
    method: check validity of ship placement
       * this sounds complicated enough it should be abstracted out
    method: place piece
    method: check what is in a square
       * happens in a variety of ways: hit/miss, to display "own" ocean,
         to display "enemy" ocean
    method: check for winning/losing
    method: displayBoard
       * take parameter for whether for own or enemy

 - class: Ship
     fields: coordinates on board
     fields: which squares have been hit
     field:  letter for type of ship (s, d, c, b).
     field:  string for the name of the ship type
     method: isSunk
     method: getletter
     method: occupiesCoordinates
     method: getname

 - class: InputParser
     method: readAndParsePlacement  //e.g. A0V or  M3H
     method: readAndParseTarget     //B2  or H8
     
From listing these, I realize that I would really like
classes for Coordinate and Placement.
Adding those gives us what I would call the "551 level" of OO Design:
we have identified nouns to make into classes and the verbs that go
with them.  We've broken it down into a few pieces to make
the large problem more manageable.  This level of design
is what I expect as we start the semester, but we now need
to improve on it drastically.

Here are several critiques of my initial thoughts:

 - Board does not follow SRP. Think about what requirements
   it is currently tied to:
     -  winning/losing: what if we changed the rules for how you win/lose?
        We would need to change Board
     -  ship placement validity:  we might change these rules too.
        We might later decide that ships need a minimum distance
        between them, etc.  That would need to change Board
     -  displaying the board (including for self/enemy).
        What if we change how to display?  What if we make a GUI?
     -  tracking the state of the board


 - Ship and Board are both tightly coupled to our textual
   representation (which also means they violate MVC).
        - For Board in a GUI, we wouldnt want to print it,
          but rather draw it
        - For Ship, we wouldn't want a letter to display in a GUI,
          we might want a color or an image.

 - The methods in InputParser tightly couple reading input with
   parsing it (note the "and" in our method names).
   We could split them out into methods in InputParser, but we
   could also observe that we could make our Coordinate and Placement
   have constructors that take Strings.

 - We are depending on specific classes, not interfaces

Let's take a moment to tackle these before we proceed:


 1. First, let us look at the tight coupling of the Ship + Board to the
    character-based text interface. We need to have some data in these
    classes to accomplish our goals (e.g., a character), but we don't
    want to "bake in" this assumption.   Instead, we'd like to be flexible
    in our data type for later.  This is a great use of Generics.
    We can make a Ship<T>, where T is the type of information our
    view needs.  For text-based battleship, we'll have Ship<Character>.
    If you later add a GUI, you could have Ship<Color>, or even Ship<Image>

    Should we just make our Ship<Character> hold a Character (e.g., 's') for
    its display info?   We need at least two: the type (e.g., 's') and
    one to indicate what a hit should show ('*').

    For a GUI-based implementation we might want something even more
    complicated: we might have different images for each "piece"
    of a ship (the front, middle, back), and different images for
    different piece that have been hit or not.
 
    We can then imagine an interface for ShipPieceDisplayInfo<T>

    interface ShipDisplayInfo<T> {
       public T getInfo(Coordinate where, boolean hit);
    }

    and then our Ship might have

    public class Ship<T> {
       private ShipDisplayInfo<T> displayInfo; //injected in constructor

       public T getDisplayInfoAt(Coordinate c) {
         //code coming later
       }
    }

 2. Next, let us work on Board.  Here is what we started with:
 
    fields: width + height
    fields: ships (list? map from coordinates to ships? set?)
    method: check validity of ship placement
       * this sounds complicated enough it should be abstracted out
    method: place piece 
    method: check what is in a square
       * happens in a variety of ways: hit/miss,
         to display "own" ocean, to display "enemy" ocean
    method: check for winning/losing
    method: displayBoard
       * take parameter for whether fo own or enemy


    - First, let us separate out displayBoard (view) from Board (model).
      We'll have a BoardTextView class.
      Also, as we change our Ship to Ship<T> our Board will need to
      be Board<T> also.
    
    - Second, checking placement validity is something we'd really like
      Board to be able to do... but we also want to separate it out.
      Can we have our cake and eat it too?
      Yes of course!

    We can make an interface for PlacementRuleChecker and have
    Board's validity check be something like

       public boolean canPlace(Ship piece,
                               Placement where,
                               PlacementRuleChecker checker)

    You might think that the  PlacementRuleChecker class will be nasty,
    but we'll come back to that later and see a really nice way to do it!

    - Third, we can just pull out the winning/losing logic
      into its own class.  We'll make an interface for it
      (let's call it CompletionRules), so we can easily change
      things later.   

 3. We are depending on specific classes (Board and Ship) rather than
    interfaces. Lets make Board an Interface and have BattleShipBoard
    as the concrete implementation.  Likewise, we'll make Ship an
    interface.  What concrete classes do we have?

    One thought might be
      CarrierShip
      DestroyShip
      SubmarineShip
      BattleShip

    But let us note that these classes really only differ in *data*
    not behavior.  E.g., one is 1x2 and has letter 's' and another
    is 1x4 and has letter 'b'.

    We could also imagine

     RectangleShip

    which covers all the ships in Version 1.  We might then have other
    classes for Version 2's ships.

    We could also realize that all our ships really are just sets of
    coordinates (and maybe some behaviors that go with them).
    This means that we could have
    this inheritance hierarchy:

        interface Ship
         |
         --abstract class BasicShip //set of coordinates
                  |
                  |--RectangleShip //covers all Version 1 ships
                  |--TShapedShip //Version 2 BattleShip
                  |--ZShapedShip //Version 2 Carrier
    
Ok, *now* we have a pretty good idea of what our classes will look like:


 1.  interface Board<T>
 2.  class BattleShipBoard<T> implementsBoard<T>
 3.  interface Ship<T>
 4.  abstract class BasicShip<T> implements Ship<T>
 5.  class RectangleShip<T> extends BasicShip<T>
  in version 2:   class TShapedShip<T> extends BasicShip<T>     
  in version 2:   class ZShapedShip<T> extends BasicShip<T>
 6.  class Coordinate
       with int row + int column
 7.  class Placement
       with Coordinate where + (something?) orientation
 8.  class BoardTextView
 9.  interface ShipDisplayInfo<T>
 10. interface PlacementRuleChecker
 11. interface CompletionRules  
 12. class App  (the top level class that puts it all together)
 
We still have a few things to think about:
 (1) We don't need to just display one board, but really two:
     does that go in BoardTextView or some other class?
 (2) In [9] above (our Placement class) we put ??? for the orientation.
     What do we want here?
     char (H/V in Version 1, H/V/U/D/L/R in Version 2) would work
     but is unpleasant.
     We're going to go with "char" for orientation (even though we don't
     like it), and see how it plays out.

 (3) I haven't spelled out all the details for all the classes.  That's ok.
     We've got a good idea of the big picture, and can start with our
     first tasks.


Next let's try to think about what our tasks are, in what order, and
how long they will take. Note that all tasks include test cases and
commenting of the code for that task. However, these are development
time estimates (as if you were just writing the code).  I have
adjusted my estimates to what I expect for you, not what I expect for
me to do.  These do NOT, however, include the fact that you will be
reading detailed instructions, which will make them take a bit longer.

I also divide these into 5 major "goals" each of which is split into
tasks. Your extra credit will be to deliver each goal by a specific date.


//Goal 1: minimal end to end system
    Task                                           Time Estimate [~2 hours]
    -----------------------------------------------+------------------------
  0. Project Setup                                        5 min
  1. BattleShipBoard class                               10 min
      - for now only width/height
      - and getters/setters
  2. BoardTextView that only does empty boards           15 minutes
  3. Coordinate class                                    10 min
      - including constructor that takes "A0" string   
  4. Placement class                                     10 min
      - including constructor that takes "A0V" string 
  5. Ship interface                                      5 min
  6. Placeholder BasicShip class                         15 min
       - not abstract yet
       - has one Coordinate
       - most methods hard coded
  7. Add ships to BattleShipBoard                        30 min
       - add fields to hold them
       - add place method
       - no checking for valid placement yet
       - get what is in a square
           - only for our own board (not enemy board)
           - no tracking if that square has been missed
  8. Update BoardTextView to display boards with ships   15 min
  9. App skeleton                                        15 min
      - make a board
      - read a placement (no error handling yet)
      - place piece on board
      - display board
      - exit

Note that this first goal starts with very minimal state
(the simplest "Board" we can make) and builds to an end to end system.
The minimal end to end system has the "skeleton" of what we need
to do: it reads a placement (for one ship), puts that ship
on the board (just a single square placeholder now), displays
the board.   We do NOT do the error handling yet for invalid
placements, etc.  

Now we need to start getting rid of the placeholders and adding features.
First lets make real ships:

//Goal 2: real BasicShip class and RectangleShip

    Task                                         Time Estimate [~1.5 hour]
    -----------------------------------------------+------------------------
  10. Make RectangleShip                                         30 min
       - BasicShip now abstract
       - RectangleShip has width/height
  11. Add "hit tracking" to BasicShip                            30 min
  12. Add name and display info to BasicShip                     30 min

//Goal 3: check for valid placements
    Task                                          Time Estimate [~1 hour]
    -----------------------------------------------+------------------------
  13. In Bounds Rule                                             20 min
     - Make sure a new placement doesnt go off board
  14. No Collision Rule                                          20 min
     - Make sure a new placement overlap a ship
  15. Put it all together                                        20 min

//Goal 4: finish up "placement phase" of game
    Task                                         Time Estimate [~1.5 hour]
    -----------------------------------------------+------------------------
  16.  Place all ships                                         30 min
  17.  Error handling for placement                            30 min
  18.  Second Player                                           30 min
        - You need to do placement for one player,
          then the other.  We have to add that here
  
//Goal 5: "Attacking Phase" of game
    Task                                          Time Estimate [~2 hours]
    -----------------------------------------------+------------------------
  19. Display board for enemy                                  30 min
  20. Display two boards side by side                          30 min
  21. Checking for win/lose                                    30 min
  22. Interact with user                                       30 min
    - read coordinates (+ error handling)
    - display outcomes

These estimates work out to about 8 hours for version 1. Let us increase
that to 10-12 given that you are reading detailed instructions, etc.
We also *strongly* encourage you to start early.  Do not wait until
12 hours before the deadline and try to do this in one marathon.
Instead we recommend the following:
 - Assignment released   Jan 25
 - Do Goal 1 by 11:59 PM Jan 29
 - Do Goal 2 by 11:59 PM Feb 1 
 - Do Goal 3 by 11:59 PM Feb 3
 - Do Goal 4 by 11:59 PM Feb 5
 - Do Goal 5 by 11:59 PM Feb 7
 - Version 2 between Feb 7 and Feb 14
    o You will do your own design and implementation for Version 2.
    o We recommend you break Version 2 down into tasks, and plan
      intermediate deadlines for yourself on them.
 - The assignment is due 11:59 PM Feb 14.

**************
To help encourage you to stay on track, we will offer you the following
*extra credit*
**************
if you meet the suggested completion dates for Goals 1-5                    
 o 5 Goals met: +3 points                                                   
 o 4 Goals met: +2 points                                                   
 o 3 Goals met: +1.5 points                                                 
 o 2 Goals met: +1 point                                                    
 o 1 Goal met:  +0.5 points

To meet a goal, you need to have all the tasks for that goal done
(as described in this walkthrough) including documentation and testing.
Note that there are several days to do Goal 1, but that does not mean you
should wait until that day to start!   Get started as soon as you can.
Aask questions on the course forums, make sure you are clear on what you
are doing, and give yourself time to handle problems.  If you can get ahead
of things, that is much better than being behind things!   Also, plan
carefully including the work for all of your classes (after the Spring 
Festival), and any other constraints you have.

git commit and git push for at least each task above (so for version 1,
you would have at least 22 git commits and git pushes).   Note that as
we will talk about later in the course, when you work in teams you need
to merge you code often.  It is good to get in the habit of committing
and pushing often now.  Also, git commit and git push is how we will see
that you did the various tasks on the suggested timeline.

Before we proceed, we want to take a second to note that this task breakdown
has moved from what might seem like a dauntingly large task
("How will I write battleship??")
to 22 tasks that are each of a size that should be approachable.

Now that we have though about our class design, and broken things down
into tasks, we are ready to get started.  We are going to walk you
through the tasks, generally with more detail at the start and less at
the end.

The remainder of this walkthrough is broken down into files for
individuals tasks (task0.txt, task1.txt,...)  and each of those
are placed in a directory for the goal they correspond to.
When you are ready to proceed, you should go to goal1/task0.txt,
and start there.














