/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.adh39.battleship;

import java.util.ArrayList;
import java.util.HashSet;

public class BattleShipBoard<T> implements Board<T> {
    private final int width;
    final ArrayList<Ship<T>> myShips;
    private final PlacementRuleChecker<T> placementChecker;
    final HashSet<Coordinate> enemyMisses;
    private final int height;
    public Ship<T> fireAt(Coordinate c){
        T boardInfo=whatIsAt(c);
        if(boardInfo!=null) {
            for (Ship<T> s: myShips) {
                if (s.occupiesCoordinates(c)){
                    s.recordHitAt(c);
                    return s;
                }
            }
        }
        enemyMisses.add(c);
        return null;
    }
    public int getWidth(){
        return this.width;
    }
    public int getHeight(){
        return this.height;
    }
    /**
     * add a new ship to ArrayList myships if valid
     *
     * @field toAdd - the ship to add
     * @return true if successfully add
     */
    public String tryAddShip(Ship<T> toAdd){
        String  s= placementChecker.checkPlacement(toAdd,this);
        if(s==null){
            myShips.add(toAdd);
            return null;
        }
        return s;
    }
    /**
     * print what is placed in a particular coordinate
     *
     * @field toAdd - the ship to add
     * @return true if successfully add
     */
    public T whatIsAt(Coordinate where) {
        for (Ship<T> s: myShips) {
            if (s.occupiesCoordinates(where)){
                return s.getDisplayInfoAt(where);
            }
        }
        return null;
    }
    public BattleShipBoard(int w, int h) {
        this(w, h, new InBoundsRuleChecker<T>(new NoCollisionRuleChecker<>(null)));
    }
    public BattleShipBoard(int w, int h,PlacementRuleChecker<T> placementChecker) {
        enemyMisses=new HashSet<>();
        myShips=new ArrayList<>();
        if (w <= 0) {
            throw new IllegalArgumentException("BattleShipBoard's width must be positive but is " + w);
        }
        if (h <= 0) {
            throw new IllegalArgumentException("BattleShipBoard's height must be positive but is " + h);
        }
        this.width = w;
        this.height = h;
        this.placementChecker=placementChecker;
    }
}
