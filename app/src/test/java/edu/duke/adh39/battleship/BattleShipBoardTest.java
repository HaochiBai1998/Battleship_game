/*
 * This Java source file was generated by the Gradle 'init' task.
 */
 
package edu.duke.adh39.battleship;

import static org.junit.jupiter.api.Assertions.*;

import org.checkerframework.checker.units.qual.C;
import org.junit.jupiter.api.Test;

import javax.crypto.spec.ChaCha20ParameterSpec;
import java.awt.*;

public class BattleShipBoardTest {

  private void checkWhatIsAtBoard(Board<Character> b, Character[][] expected){
    for(int i=0;i< b.getHeight();++i){
      for(int j=0;j<b.getWidth();++j){
        Character tmp=b.whatIsAt(new Coordinate(i,j));
        if(tmp!=expected[i][j]){
          new IllegalArgumentException("expected"+expected[i][j]+"at ("+i+","+j+") but get "+tmp+"\n");
        }
      }
    }
    return;
  }
  @Test
  public void test_width_and_height() {
    Board<Character> b1 = new BattleShipBoard(10, 20);
    assertEquals(10, b1.getWidth());
    assertEquals(20, b1.getHeight());
  }
  @Test
  public void test_invalid_dimensions() {
    //check height
    assertThrows(IllegalArgumentException.class, () -> new BattleShipBoard(10, 0));
    //check width
    assertThrows(IllegalArgumentException.class, () -> new BattleShipBoard(0, 20));
    //check height
    assertThrows(IllegalArgumentException.class, () -> new BattleShipBoard(10, -5));
    //check width
    assertThrows(IllegalArgumentException.class, () -> new BattleShipBoard(-8, 20));
  }
  @Test
  public void test_ship_placement(){
    Character[][]  expected=new Character[2][2];
    //build a 2x2 board
    Board<Character> b1 = new BattleShipBoard<Character>(2, 2);
    checkWhatIsAtBoard(b1,new Character[][]{{null,null},
            {null,null}});
    //add a ship to (1,1)
    b1.tryAddShip(new RectangleShip<Character> (new Coordinate(1,1),'s','*'));
    checkWhatIsAtBoard(b1,new Character[][]{{null,null},
            {null,'s'}});
    //add a ship to (0,0)
    b1.tryAddShip(new RectangleShip<Character> (new Coordinate(0,0),'s','*'));
    checkWhatIsAtBoard(b1,new Character[][]{{'s',null},
            {null,'s'}});
    //add a ship to (0,1)
    b1.tryAddShip(new RectangleShip<Character> (new Coordinate(0,1),'s','*'));
    checkWhatIsAtBoard(b1,new Character[][]{{'s','s'},
            {null,'s'}});
    //add a ship to (1,0)
    b1.tryAddShip(new RectangleShip<Character> (new Coordinate(1,0),'s','*'));
    checkWhatIsAtBoard(b1,new Character[][]{{'s','s'},
            {'s','s'}});
  }
  @Test
  void test_try_add_ship(){
    V1ShipFactory v1ShipFactory=new V1ShipFactory();
    BattleShipBoard<Character> battleShipBoard=new BattleShipBoard<Character>(7,7);
    NoCollisionRuleChecker<Character> noCollisionRuleChecker=new NoCollisionRuleChecker<>(null);
    InBoundsRuleChecker<Character> inBoundsRuleChecker=new InBoundsRuleChecker<>(noCollisionRuleChecker);

    Placement placement1=new Placement(new Coordinate(1,1),'V');
    Ship<Character> ship1=v1ShipFactory.makeBattleship(placement1);
    assertNull(battleShipBoard.tryAddShip(ship1));
    Placement placement2=new Placement(new Coordinate(2,1),'H');
    Ship<Character> ship2=v1ShipFactory.makeBattleship(placement2);
    assertNotNull(battleShipBoard.tryAddShip(ship2));
  }

}
